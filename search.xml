<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hellword！</title>
      <link href="/2022/05/16/hellword%EF%BC%81/"/>
      <url>/2022/05/16/hellword%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h4 id="1-组件间通信"><a href="#1-组件间通信" class="headerlink" title="1.组件间通信"></a>1.组件间通信</h4><h6 id="props"><a href="#props" class="headerlink" title="props"></a>props</h6><ul><li>父子通信<ul><li>传递函数，子组件给父组件传递数据</li><li>传递数据，父组件给子组件传递数据</li></ul></li><li>接收：三种写法<code> [&#39;tools&#39;]</code>,<code>&#123;tools:Array&#125;</code>,<code>&#123;tools:&#123;type:Array,default:[],require:true&#125;&#125;</code></li><li>路由的props<ul><li>布尔值，把路由中params参数映射为组件props数据</li><li>对象，静态数据，很少用</li><li>函数形式，可以把路由中params|query参数映射为组件props数据</li></ul></li></ul><h6 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h6><p>使用场景：子组件给父组件传递数据</p><ul><li>$on[简写@]和$emit</li><li>事件:原生DOM事件—-【click|mouseenter……..】</li><li>事件：自定义事件—–[子给父传递数据]</li></ul><h6 id="全局事件总线-bus"><a href="#全局事件总线-bus" class="headerlink" title="全局事件总线$bus"></a>全局事件总线$bus</h6><p>适用场景:万能</p><p><code>Vue.prototype.$bus = this</code></p><h6 id="pubsub-js-在React框架中使用比较多，-发布与订阅"><a href="#pubsub-js-在React框架中使用比较多，-发布与订阅" class="headerlink" title="pubsub.js,在React框架中使用比较多，(发布与订阅)"></a>pubsub.js,在React框架中使用比较多，(发布与订阅)</h6><p>适用场景:万能</p><h6 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h6><ul><li>数据非持久化</li></ul><ul><li>适用场景:万能</li></ul><ul><li><p>核心概念：5</p><ul><li><p>state </p></li><li><p>mutations</p></li><li><p>actions </p></li><li><p>getters </p></li><li><p>modules</p></li></ul></li></ul><h6 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h6><p>适用场景:父子间组件通信 —(一般结构)</p><ul><li><p>默认插槽</p></li><li><p>具名插槽</p></li><li><p>作用域插槽</p></li></ul><h4 id="2-进阶组件间通信"><a href="#2-进阶组件间通信" class="headerlink" title="2.进阶组件间通信"></a>2.进阶组件间通信</h4><h6 id="1-事件相关的深入学习"><a href="#1-事件相关的深入学习" class="headerlink" title="1)事件相关的深入学习"></a>1)事件相关的深入学习</h6><ul><li><p>事件:事件已经学习过两种，第一种原生DOM事件，第二种自定义事件。</p></li><li><p>组件绑定原生DOM事件，并非原生DOM事件，而是所谓的自定义事件。</p></li><li><p>如果你想把自定义事件变为原生DOM事件，需要加上修饰符.native修饰</p></li><li><p>这个修饰符(.native)，可以把自定义事件【名字：原生DOM类型的】变为原生DOM事件，</p></li></ul><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;h1&gt;EventTest组件&lt;/h1&gt;    &lt;!-- 原生DOM事件 --&gt;    &lt;button @click=&quot;handler&quot;&gt;原生btn按钮&lt;/button&gt;    &lt;!-- 使用Event1组件：底下这个组件  @click.native 原生DOM事件，利用事件的委派--&gt;    &lt;Event1 @click.native=&quot;handler1&quot;&gt;&lt;/Event1&gt;    &lt;hr/&gt;    &lt;!-- 自定义事件对于原生DOM没有任何意义 --&gt;    &lt;!-- &lt;button @erha=&quot;handler3&quot;&gt; 原生的btn&lt;/button&gt; --&gt;    &lt;Event2 @click=&quot;handler2&quot; @xxx=&quot;handler2&quot;&gt;&lt;/Event2&gt;    &lt;!-- 表单元素 color:选取颜色  range：范围条 date：日历 week--&gt;    &lt;input type=&quot;week&quot; /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;  import Event1 from &#39;./Event1.vue&#39;  import Event2 from &#39;./Event2.vue&#39;  export default &#123;    name: &#39;EventTest&#39;,    components: &#123;      Event1,      Event2,    &#125;,    methods: &#123;      //原生DOM事件的回调      handler(event)&#123;        console.log(event);      &#125;,      handler1()&#123;        console.log(&#39;66666666&#39;);      &#125;,      handler2(params)&#123;       console.log(params);      &#125;    &#125;  &#125;&lt;/script&gt;</code></pre><h6 id="2-v-model实现组件通信？"><a href="#2-v-model实现组件通信？" class="headerlink" title="2)v-model实现组件通信？"></a>2)v-model实现组件通信？</h6><ul><li>v-model：指令，可以收集表单数据【text、radio、checkbox、range】等等</li><li>切记：v-model收集checkbox需要用数组收集</li></ul><p>v-model:实现原理   :value  @input  还可以实现父子数据同步。<br><code>&lt;CustomInput v-model=&quot;msg&quot;&gt;&lt;/CustomInput&gt;</code></p><p>相当于：<code>&lt;CustomInput :value=&quot;msg&quot; @input=&quot;msg = $event&quot;&gt;&lt;/CustomInput&gt; </code> <strong>子组件触发的自定义事件必须是input,子代接收的props是value，否则v-model 不生效</strong></p><p>子组件写法:<code> &lt;input :value=&quot;value&quot;  @input=&quot;$emit(&#39;input&#39;,$event.target.value)&quot;/&gt;</code></p><ul><li><strong>$event可以作为子组件触发自定义事件传回来的参数</strong></li></ul><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;深入v-model&lt;/h2&gt;    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;    &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;    &lt;br&gt;    &lt;h2&gt;深入v-model原理&lt;/h2&gt;    &lt;!-- 原生DOM当中是有oninput事件：当表单元素发生文本的变化的时候就会立即出发 --&gt;    &lt;input type=&quot;text&quot; :value=&quot;msg&quot; @input=&quot; msg = $event.target.value&quot;/&gt;    &lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;    &lt;!--并非原生DOM：自定义组件--&gt;    &lt;CustomInput :value=&quot;msg&quot; @input=&quot;msg = $event&quot;&gt;&lt;/CustomInput&gt;         &lt;!--$event是子组件触发自定义事件传回来的参数--&gt;    &lt;CustomInput v-model=&quot;msg&quot;&gt;&lt;/CustomInput&gt;    &lt;hr&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;  import CustomInput from &#39;./CustomInput.vue&#39;  export default &#123;    name: &#39;ModelTest&#39;,    data() &#123;      return &#123;         msg:&quot;我爱塞北的大雪呀&quot;      &#125;    &#125;,    components: &#123;      CustomInput    &#125;  &#125;&lt;/script&gt;</code></pre><p><strong>子组件</strong></p><pre><code class="vue">&lt;template&gt;  &lt;div style=&quot;background: #ccc; height: 50px;&quot;&gt;    &lt;h2&gt;input包装组件----&#123;&#123;value&#125;&#125;&lt;/h2&gt;    &lt;input :value=&quot;value&quot;  @input=&quot;$emit(&#39;input&#39;,$event.target.value)&quot;/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;  export default &#123;    name: &#39;CustomInput&#39;,    props:[&#39;value&#39;]  &#125;&lt;/script&gt;</code></pre><h6 id="3-属性修饰符-sync，可以实现父子数据同步。"><a href="#3-属性修饰符-sync，可以实现父子数据同步。" class="headerlink" title="3)属性修饰符.sync，可以实现父子数据同步。"></a>3)属性修饰符.sync，可以实现父子数据同步。</h6><ul><li>以后在elementUI组件中出现，实现父子数据同步。</li><li>和v-model实现组件通信类似</li><li>可以实现父子组件数据同步，该案例在子组件绑定自定义事件（update:money）</li></ul><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    小明的爸爸现在有&#123;&#123; money &#125;&#125;元    &lt;h2&gt;不使用sync修改符&lt;/h2&gt;    &lt;Child :money=&quot;money&quot; @update:money=&quot;money = $event&quot;&gt;&lt;/Child&gt;    &lt;h2&gt;使用sync修改符&lt;/h2&gt;    &lt;!--  --&gt;    &lt;Child :money.sync=&quot;money&quot;&gt;&lt;/Child&gt;      &lt;hr /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;import Child from &quot;./Child.vue&quot;;import Child2 from &quot;./Child2.vue&quot;;export default &#123;  name: &quot;SyncTest&quot;,  data() &#123;    return &#123;      money: 10000,    &#125;;  &#125;,  components: &#123;    Child,    Child2,  &#125;,&#125;;&lt;/script&gt;</code></pre><p>子组件</p><pre><code class="vue">&lt;template&gt;  &lt;div style=&quot;background: #ccc; height: 50px;&quot;&gt;    &lt;span&gt;小明每次花100元&lt;/span&gt;    &lt;button @click=&quot;$emit(&#39;update:money&#39;,money - 100)&quot;&gt;花钱&lt;/button&gt;    爸爸还剩 &#123;&#123;money&#125;&#125; 元  &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;  export default &#123;    name: &#39;Child&#39;,    props:[&#39;money&#39;]  &#125;&lt;/script&gt;</code></pre><h6 id="4-attrs与-listeners-—-vue-helper-父子组件通信"><a href="#4-attrs与-listeners-—-vue-helper-父子组件通信" class="headerlink" title="4)$attrs与$listeners   —-vue-helper  父子组件通信"></a>4)$attrs与$listeners   —-vue-helper  父子组件通信</h6><ul><li><strong>$attrs：组件实例的属性，可以获取到父亲传递的props数据（前提子组件没有通过props接收）</strong></li><li><strong>$listeners：组件实例的属性，可以获取到父亲传递自定义事件（对象形式呈现）</strong></li><li><strong>v-bind 可以直接赋予他一个对象，会把这些对象作为标签的属性</strong></li><li><strong>v-for 可以直接赋予他一个对象，会把这些对象作为标签的事件，属性值需要为函数</strong></li><li><strong>以上两种用法不可以简写</strong></li></ul><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;自定义带Hover提示的按钮&lt;/h2&gt;    &lt;!-- 二次封装的HintButton按钮的时候，把人家el-button需要的数据传递过去 --&gt;    &lt;HintButton      type=&quot;success&quot;      icon=&quot;el-icon-plus&quot;      title=&quot;我是中国人&quot;      @click=&quot;handler&quot;    /&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;import HintButton from &quot;./HintButton&quot;;export default &#123;  name: &quot;AttrsListenersTest&quot;,  components: &#123;    HintButton,  &#125;,  methods: &#123;    handler() &#123;      alert(&quot;弹弹弹&quot;);    &#125;,  &#125;,&#125;;&lt;/script&gt;</code></pre><p><strong>子组件</strong></p><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;a :title=&quot;title&quot;&gt;      &lt;el-button v-bind=&quot;$attrs&quot; v-on=&quot;$listeners&quot;&gt;添加&lt;/el-button&gt;    &lt;/a&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &quot;&quot;,  props: [&quot;title&quot;],  mounted() &#123;    //this.$attrs:可以获取到父亲传递的数据【props】    //this.$attrs是可以获取父亲传递的props数据，如果子组件通过    //props:[],接受，this.$attrs属性是获取不到的    console.log(this.$attrs);    console.log(this.$listeners);  &#125;,&#125;;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt;</code></pre><h6 id="5-children与-parent-可以实现父子组件通信"><a href="#5-children与-parent-可以实现父子组件通信" class="headerlink" title="5)$children与$parent       可以实现父子组件通信"></a>5)$children与$parent       可以实现父子组件通信</h6><ul><li>ref:可以在父组件内部获取子组件—实现父子通信【可以使用子组件的数据和方法】</li><li>$children:可以在父组件内部获取全部的子组件【返回数组】</li><li>$parent:可以在子组件内部获取唯一的父组件【返回组件实例】</li></ul><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;BABA有存款: &#123;&#123; money &#125;&#125;&lt;/h2&gt;    &lt;button @click=&quot;JieQianFromXM(100)&quot;&gt;找小明借钱100&lt;/button&gt;&lt;br /&gt;    &lt;button @click=&quot;JieQianFromXH(150)&quot;&gt;找小红借钱150&lt;/button&gt;&lt;br /&gt;    &lt;button @click=&quot;JieQianAll(200)&quot;&gt;找所有孩子借钱200&lt;/button&gt;&lt;br /&gt;    &lt;button @click=&quot;SendInfo&quot;&gt;我是baba&lt;/button&gt;    &lt;br /&gt;    &lt;!-- 小明 --&gt;    &lt;Son ref=&quot;xm&quot; /&gt;    &lt;br /&gt;    &lt;!-- 小红 --&gt;    &lt;Daughter ref=&quot;xh&quot;/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Son from &quot;./Son&quot;;import Daughter from &quot;./Daughter&quot;;export default &#123;  name: &quot;ChildrenParentTest&quot;,  data() &#123;    return &#123;      money: 1000,    &#125;;  &#125;,  methods: &#123;    //找儿子借钱    JieQianFromXM(money) &#123;      //父组件的数据累加100      this.money += money;      this.$refs.xm.money -= money;    &#125;,    JieQianFromXH(money) &#123;      //父组件的数据累加150      this.money += money;      this.$refs.xh.money -= money;    &#125;,    JieQianAll(money)&#123;      this.money += 2*money;      this.$children.forEach(item=&gt;item.money-=money);      //不建议用枚举获取子组件：因为没办法确定到底是那个子组件      // this.$children[0].money -=money;    &#125;,    SendInfo()&#123;      //在父组件中获取到子组件（数据+方法）      this.$refs.xm.tinghua();    &#125;  &#125;,  components: &#123;    Son,    Daughter,  &#125;,&#125;;&lt;/script&gt;&lt;style&gt;&lt;/style&gt;</code></pre><p><strong>Son</strong></p><pre><code class="vue">&lt;template&gt;  &lt;div style=&quot;background: #ccc; height: 50px;&quot;&gt;    &lt;h3&gt;儿子小明: 有存款: &#123;&#123;money&#125;&#125;&lt;/h3&gt;    &lt;button @click=&quot;geiQian(50)&quot;&gt;给BABA钱: 50&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#39;Son&#39;,  data () &#123;    return &#123;      money: 30000    &#125;  &#125;,  methods: &#123;    tinghua()&#123;        console.log(&#39;我是小明，我听爸爸的话&#39;);    &#125;,    geiQian(money)&#123;       this.money-=money;       this.$parent.money+=money;    &#125;  &#125;&#125;&lt;/script&gt;</code></pre><p><strong>Daughter</strong></p><pre><code>&lt;template&gt;  &lt;div style=&quot;background: #ccc; height: 50px;&quot;&gt;    &lt;h3&gt;女儿小红: 有存款: &#123;&#123;money&#125;&#125;&lt;/h3&gt;    &lt;button&gt;给BABA钱: 100&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#39;Daughter&#39;,  data () &#123;    return &#123;      money: 20000    &#125;  &#125;,  methods: &#123;      &#125;&#125;&lt;/script&gt;</code></pre><h6 id="6-作用域插槽"><a href="#6-作用域插槽" class="headerlink" title="6)作用域插槽"></a>6)作用域插槽</h6><pre><code class="vue">&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;效果一: 显示TODO列表时, 已完成的TODO为绿色&lt;/h2&gt;    &lt;List :todos=&quot;todos&quot;&gt;        &lt;!-- 书写template --&gt;        &lt;template slot-scope=&quot;todo&quot;&gt;            &lt;h5 :style=&quot;&#123;color:todo.todo.isComplete?&#39;green&#39;:&#39;black&#39;&#125;&quot;&gt;&#123;&#123;todo.todo.text&#125;&#125;&lt;/h5&gt;        &lt;/template&gt;    &lt;/List&gt;     &lt;List :todos=&quot;todos&quot;&gt;        &lt;!-- 书写template --&gt;        &lt;template slot-scope=&quot;todo&quot;&gt;            &lt;a :style=&quot;&#123;color:todo.todo.isComplete?&#39;green&#39;:&#39;black&#39;&#125;&quot;&gt;&#123;&#123;todo.todo.text&#125;&#125;&lt;/a&gt;        &lt;/template&gt;    &lt;/List&gt;    &lt;hr&gt;    &lt;h2&gt;效果二: 显示TODO列表时, 带序号, TODO的颜色为蓝绿搭配&lt;/h2&gt;    &lt;List1 :data=&quot;todos&quot;&gt;         &lt;template slot-scope=&quot;&#123;row,index&#125;&quot;&gt;               &lt;h1 :style=&quot;&#123;color:row.isComplete?&#39;green&#39;:&#39;hotpink&#39;&#125;&quot;&gt;索引值&#123;&#123;index&#125;&#125;---------&#123;&#123;row.text&#125;&#125;&lt;/h1&gt;         &lt;/template&gt;    &lt;/List1&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script type=&quot;text/ecmascript-6&quot;&gt;  //子组件  import List from &#39;./List&#39;  import List1 from &#39;./List1&#39;  export default &#123;    name: &#39;ScopeSlotTest&#39;,    data () &#123;      return &#123;        todos: [          &#123;id: 1, text: &#39;AAA&#39;, isComplete: false&#125;,          &#123;id: 2, text: &#39;BBB&#39;, isComplete: true&#125;,          &#123;id: 3, text: &#39;CCC&#39;, isComplete: false&#125;,          &#123;id: 4, text: &#39;DDD&#39;, isComplete: false&#125;,        ]      &#125;    &#125;,    components: &#123;      List,      List1     &#125;  &#125;&lt;/script&gt;</code></pre><p><strong>List</strong></p><pre><code>&lt;template&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(todo,index) in todos&quot; :key=&quot;index&quot;&gt;       &lt;!-- 坑：熊孩子挖到坑，父亲填坑 --&gt;       &lt;!-- 数据来源于父亲：但是子组件决定不了结构与外网--&gt;       &lt;slot :todo=&quot;todo&quot;&gt;&lt;/slot&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#39;List&#39;,  props: &#123;    todos: Array  &#125;&#125;&lt;/script&gt;</code></pre><p><strong>List1</strong></p><pre><code>&lt;template&gt;  &lt;ul&gt;    &lt;li v-for=&quot;(todo,index) in data&quot; :key=&quot;index&quot;&gt;       &lt;!-- 坑：熊孩子挖到坑，父亲填坑 --&gt;       &lt;!-- 数据来源于父亲：但是子组件决定不了结构与外网--&gt;       &lt;slot :row=&quot;todo&quot; :index=&quot;index &quot;&gt;&lt;/slot&gt;    &lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;&lt;script&gt;export default &#123;  name: &#39;List1&#39;,  props: &#123;    data: Array  &#125;&#125;&lt;/script&gt;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/16/hello-world/"/>
      <url>/2022/05/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
